/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.text.SimpleTemplateEngine
import groovy.text.Template
import groovy.text.TemplateEngine
import java.util.regex.Matcher
import com.sun.org.apache.xerces.internal.parsers.XMLParser

// we only need a test source set
apply plugin: 'groovy'
apply plugin: 'code-quality'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply from: '../gradle/codeQuality.gradle'
apply from: '../gradle/ssh.gradle'

remoteLocations = new RemoteLocations()

repositories {
    mavenCentral()
}
configurations {
    integTestCompile { extendsFrom groovy }
}
dependencies {
    groovy localGroovy()
    testCompile 'junit:junit:4.7'
    testCompile 'net.sourceforge.htmlunit:htmlunit:2.8'
}

webSrcDir = file('src')

if (!hasProperty('gradleCorePath')) {
    gradleCorePath = projectDir.parentFile
} else {
    gradleCorePath = file(gradleCorePath)
}
File generatedDocs = new File("$gradleCorePath/subprojects/docs/build/websiteDocs")

//buildWebsiteDir = new File(System.getProperty('user.home'), 'Sites/gradle')
buildWebsiteDir = new File(buildDir, 'website')

checkstyleConfigDir = "$gradleCorePath/config/checkstyle"
checkstyleProperties.checkstyleConfigDir = checkstyleConfigDir
checkstyleConfigFileName = "$checkstyleConfigDir/checkstyle.xml"
codeNarcConfigFileName = "$gradleCorePath/config/codenarc.xml"

task userguideContent << {
    def startParams = gradle.startParameter.newBuild()
    startParams.taskNames = ['websiteDocs']
    startParams.currentDir = gradleCorePath
    def launcher = GradleLauncher.newInstance(startParams)
    launcher.run().rethrowFailure()
}

releases = []
task configureReleases << {
    def releaseXml = new XmlParser().parse(new File(generatedDocs, "releases.xml"))
    def current = releaseXml.current[0]
    releases << new CurrentRelease(version: current.'@version')
    releaseXml.release.each {
        releases << new Release(version: it.'@version')
    }
}

task html(dependsOn: configureReleases) << {
    buildWebsiteDir.mkdirs()
    File webContentSrcDir = new File(webSrcDir, 'content')
    def engine = new SimpleTemplateEngine()
    def binding = [
            php: new PhpIncludes(phpSrcDir: new File(webSrcDir, 'php')),
            currentRelease: releases[0],
            releases: releases,
            previousReleases: releases.subList(1, releases.size())
    ]
    binding.sidebar = engine.createTemplate(new File(webSrcDir, 'sidebar.html')).make(binding).toString()
    def skeletonTemplate = engine.createTemplate(new File(webSrcDir, 'skeleton.html'))

    List pages = []
    webContentSrcDir.eachFileMatch(~/^.+?\.html$/) { pages << new Page(srcFile: it) }
    generatedDocs.eachFileMatch(~/^.+?\.html$/) {
        if (it.name != 'userguide.html' && it.name != 'website.html') {
            pages << new GeneratedPage(srcFile: it)
        }
    }
    pages << new IndexPage(srcFile: "$webContentSrcDir/index.php" as File)
    pages << new PhpPage(srcFile: "$webContentSrcDir/news.php" as File)
    pages << new PhpPage(srcFile: "$webContentSrcDir/cookbook.php" as File)
    pages.each { Page page ->
        page.destFile = new File(buildWebsiteDir, page.srcFile.name)
        page.engine = engine
        page.pageTemplate = skeletonTemplate
        page.templateBinding = binding
        page.transform()
    }

    copy {
        into buildWebsiteDir
        from(webSrcDir) {
            include 'css/**'
            include 'img/**'
            include 'other-resources/**'
            include 'php/*.inc'
        }
        from(generatedDocs) {
            include 'base.css'
            into 'css'
        }
        from(generatedDocs) {
            include 'img/**'
        }
    }
}

assemble.dependsOn html

// A marker to indicate we are doing a release
task releaseVersion
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(releaseVersion)) {
        remoteLocations.release = true
    }
}

test {
    dependsOn html
    systemProperties 'test.base.uri': buildWebsiteDir.toURI()
    systemProperties 'test.ignore.docs': true
    inputs.dir buildWebsiteDir
}

task uploadHtml(dependsOn: html, type: Scp) {
    sourceDir = buildWebsiteDir
    gradle.taskGraph.whenReady {
        destinationDir = remoteLocations.scpDir
    }
    host = 'gradle01.managed.contegix.com'
    userName = project.hasProperty('websiteScpUserName') ? project.websiteScpUserName : null
    password = project.hasProperty('websiteScpUserPassword') ? project.websiteScpUserPassword : null
}

task linkCurrent(type: SshExec, dependsOn: configureReleases) {
    configureReleases.doLast {
        linkCurrent.commandLine('rm', '-f', "${remoteLocations.scpDir}/current" as String)
        linkCurrent.commandLine('ln', '-s', "${remoteLocations.webRootDir}/${releases[0].remoteDir}" as String, "${remoteLocations.scpDir}/current" as String)
    }
    host = 'gradle01.managed.contegix.com'
    userName = project.hasProperty('websiteScpUserName') ? project.websiteScpUserName : null
    password = project.hasProperty('websiteScpUserPassword') ? project.websiteScpUserPassword : null
}

task uploadWebsite(dependsOn: [uploadHtml, linkCurrent])

task testRemote(type: Test, dependsOn: uploadWebsite) {
    doFirst {
        systemProperties 'test.base.uri': remoteLocations.websiteUrl
    }
    systemProperties 'test.ignore.docs': false
}

task install(type: Copy) {
    dependsOn html
    from buildWebsiteDir
    into "${System.getProperty('user.home')}/Sites/gradle"
}

task ciBuild(dependsOn: [clean, html, uploadWebsite, testRemote])

task release(dependsOn: [releaseVersion, clean, html, uploadWebsite, testRemote])

class Page {
    def File srcFile
    def File destFile
    def Template pageTemplate
    def Map templateBinding
    def TemplateEngine engine

    def transform() {
        destFile.text = text
    }

    def getTitle() {
        def content = srcFile.text
        def matcher = content =~ /<h1.*>([^<]+)<\/h1>/
        if (!matcher) {
            throw new GradleException("Could not find title in $srcFile.name.")
        }
        def title = matcher[0][1].trim()
        title
    }

    def getContent() {
        try {
            def contentTemplate = engine.createTemplate(srcFile.text)
            contentTemplate.make(templateBinding).toString()
        } catch (Exception e) {
            throw new GradleException("Could not generate output file for '${srcFile.name}.", e)
        }
    }

    def getText() {
        pageTemplate.make(templateBinding + [fileName: srcFile.name, content: content, title: title]).toString()
    }
}

class PhpPage extends Page {

    def String getText() {
        File webPhpSrcDir = new File(srcFile.parentFile.parentFile, 'php')
        String prefix = srcFile.name.replace('.php', 'Php')
        File prefixFile = new File(webPhpSrcDir, "${prefix}Header.php")
        String text = super.getText()
        return prefixFile.file ? prefixFile.text + text : text
    }
}

class IndexPage extends PhpPage {
    def Object getTitle() {
        'Home'
    }
}

class GeneratedPage extends Page {
    def String getContent() {
        srcFile.text
    }
}

class PhpIncludes {
    def File phpSrcDir

    def propertyMissing(String name) {
        File srcFile = new File(phpSrcDir, "${name}.php")
        if (!srcFile.file) {
            throw new MissingPropertyException(name, PhpIncludes.class)
        }
        srcFile.text
    }
}

class Release {
    def String title
    def String version

    def BigDecimal getMajorVersion() {
        Matcher matcher = version =~ /(\d+\.\d+).*/
        matcher.matches()
        return matcher.group(1) as BigDecimal
    }

    def String getReleaseNoteVersion() {
        if (version.startsWith("0.9-rc")) {
            return "0.9"
        }
        return version
    }

    def String getDisplayName() {
        return "Gradle $version"
    }

    def String getAllDistributionUrl() {
        return "${distributionBase}gradle-${version}-all.zip"
    }

    def String getBinDistributionUrl() {
        return "${distributionBase}gradle-${version}-bin.zip"
    }

    def String getSrcDistributionUrl() {
        return "${distributionBase}gradle-${version}-src.zip"
    }

    def String getDistributionBase() {
        if (majorVersion >= 0.9 && !version.startsWith('0.9-rc')) {
            return "http://repo.gradle.org/gradle/distributions/"
        } else {
            return "http://dist.codehaus.org/gradle/"
        }
    }

    def String getDocsUrl() {
        return "/${remoteDir}/docs"
    }

    def String getRemoteDir() {
        return "releases/${version}"
    }

    def String getReleaseNotesUrl() {
        return "http://wiki.gradle.org/display/GRADLE/Gradle+${releaseNoteVersion}+Release+Notes"
    }

    def String getUserGuideHtmlUrl() {
        return "${docsUrl}/userguide/userguide.html"
    }

    def String getUserGuideSingleHtmlUrl() {
        return "${docsUrl}/userguide/userguide_single.html"
    }

    def String getUserGuidePdfUrl() {
        return "${docsUrl}/userguide/userguide.pdf"
    }

    def boolean getHasDsldoc() {
        return majorVersion >= 0.9 && !version.startsWith('0.9-rc')
    }

    def String getDsldocUrl() {
        return "${docsUrl}/dsl/index.html"
    }

    def String getJavadocUrl() {
        return "${docsUrl}/javadoc/index.html"
    }

    def String getGroovydocUrl() {
        return "${docsUrl}/groovydoc/index.html"
    }
}

class CurrentRelease extends Release {
    def String getDisplayName() {
        return "Gradle $version (current release)"
    }

    def String getDocsUrl() {
        return "current/docs"
    }
}

class RemoteLocations {
    boolean release

    String getWebsiteUrl() {
        return release ? 'http://www.gradle.org/' : 'http://www.gradle.org/latest/'
    }

    String getWebRootDir() {
        return '/var/www/domains/gradle.org/www/htdocs'
    }

    String getScpDir() {
        return release ? webRootDir : "$webRootDir/latest"
    }
}